import numpy as np
import matplotlib.pyplot as plt

### === time =================
# --- For devdan (dyn)
# test time(s): (4.267, 0.061, 0.050)
# train time(s): (105.017, 1.500, 0.210)

# --- For devdan-dyn: (without gen)
# test time(s): (3.048, 0.044, 0.003)
# train time(s): (35.435, 0.506, 0.110)

# --- For devdan (static=16)

# --- For devdan (static=32)
# test time(s): (2.862, 0.041, 0.005)
# train time(s): (37.542, 0.536, 0.067)

# --- For devdan (static=64)
# test time(s): (3.283, 0.047, 0.004)
# train time(s): (61.457, 0.878, 0.133)

# --- For devdan-static64: (without gen)
# test time(s): (3.087, 0.044, 0.004)
# train time(s): (27.963, 0.399, 0.126)

# --- For devdan (static=128)
# test time(s): (3.600, 0.051, 0.005)
# train time(s): (121.890, 1.741, 0.266)

# --- For devdan (static=256)

def get_pmnist_devdan_data():
  data = [
    {
      'label': 'devdan-dyn',  # 89 nodes created
      'acc_avg': '75.1±18.3',
      'acc': np.array([0.091, 0.533, 0.71, 0.534, 0.762, 0.787, 0.751, 0.766, 0.737, 0.826, 0.796, 0.841, 0.105, 0.507, 0.702, 0.749, 0.716, 0.818, 0.817, 0.852, 0.761, 0.847, 0.87, 0.839, 0.842, 0.757, 0.87, 0.833, 0.802, 0.858, 0.861, 0.839, 0.866, 0.848, 0.759, 0.886, 0.789, 0.871, 0.867, 0.844, 0.845, 0.863, 0.879, 0.888, 0.874, 0.87, 0.843, 0.885, 0.889, 0.892, 0.121, 0.581, 0.759, 0.736, 0.802, 0.835, 0.862, 0.817, 0.849, 0.118, 0.439, 0.68, 0.681, 0.732, 0.785, 0.803, 0.776, 0.765, 0.814, 0.795])
    },
    {
      'label': 'devdan-dyn (wo gen)', # 56 nodes created
      'acc_avg': '82.7±18.1',
      'acc': np.array([0.091, 0.751, 0.778, 0.804, 0.811, 0.807, 0.814, 0.88, 0.867, 0.871, 0.884, 0.864, 0.134, 0.802, 0.737, 0.84, 0.834, 0.88, 0.888, 0.89, 0.873, 0.878, 0.874, 0.892, 0.81, 0.888, 0.89, 0.902, 0.919, 0.92, 0.926, 0.891, 0.915, 0.931, 0.909, 0.913, 0.887, 0.922, 0.911, 0.9, 0.921, 0.912, 0.917, 0.907, 0.924, 0.915, 0.921, 0.89, 0.901, 0.931, 0.118, 0.791, 0.854, 0.833, 0.864, 0.839, 0.879, 0.895, 0.897, 0.121, 0.746, 0.844, 0.856, 0.853, 0.826, 0.837, 0.894, 0.858, 0.87, 0.869])
    },
    # {
    #   'label': 'devdan (static=16)',
    #   'acc_avg': '',
    #   'acc': np.array()
    # },
    {
      'label': 'devdan-s32',
      'acc_avg': '77.6±19.0',
      'acc': np.array([0.099, 0.747, 0.801, 0.836, 0.821, 0.84, 0.868, 0.881, 0.855, 0.866, 0.863, 0.885, 0.102, 0.637, 0.758, 0.765, 0.818, 0.833, 0.848, 0.853, 0.858, 0.854, 0.825, 0.849, 0.842, 0.87, 0.874, 0.885, 0.862, 0.892, 0.88, 0.884, 0.866, 0.879, 0.872, 0.902, 0.878, 0.888, 0.882, 0.882, 0.91, 0.892, 0.902, 0.9, 0.89, 0.903, 0.895, 0.895, 0.895, 0.884, 0.099, 0.43, 0.623, 0.629, 0.713, 0.681, 0.682, 0.706, 0.742, 0.101, 0.529, 0.662, 0.771, 0.774, 0.733, 0.805, 0.818, 0.82, 0.799, 0.809])
    },
    {
      'label': 'devdan-s64',
      'acc_avg': '81.4±18.6',
      'acc': np.array([0.099, 0.763, 0.806, 0.849, 0.863, 0.884, 0.872, 0.882, 0.892, 0.903, 0.919, 0.894, 0.097, 0.761, 0.794, 0.816, 0.815, 0.877, 0.876, 0.879, 0.879, 0.886, 0.874, 0.861, 0.844, 0.877, 0.892, 0.908, 0.915, 0.913, 0.914, 0.859, 0.915, 0.91, 0.887, 0.88, 0.902, 0.885, 0.902, 0.895, 0.91, 0.896, 0.919, 0.923, 0.924, 0.903, 0.916, 0.914, 0.933, 0.903, 0.113, 0.653, 0.795, 0.84, 0.788, 0.837, 0.825, 0.886, 0.862, 0.095, 0.63, 0.666, 0.776, 0.771, 0.787, 0.81, 0.853, 0.833, 0.851, 0.813])
    },
    {
      'label': 'devdan-s64 (wo gen)',
      'acc_avg': '83.4±18.3',
      'acc': np.array([0.099, 0.792, 0.74, 0.82, 0.872, 0.878, 0.884, 0.914, 0.921, 0.904, 0.916, 0.898, 0.127, 0.845, 0.858, 0.766, 0.881, 0.846, 0.908, 0.88, 0.899, 0.883, 0.887, 0.905, 0.897, 0.9, 0.901, 0.916, 0.918, 0.919, 0.92, 0.899, 0.914, 0.913, 0.909, 0.925, 0.937, 0.898, 0.898, 0.919, 0.933, 0.906, 0.914, 0.928, 0.933, 0.91, 0.943, 0.917, 0.941, 0.928, 0.129, 0.661, 0.854, 0.846, 0.853, 0.879, 0.849, 0.842, 0.874, 0.127, 0.741, 0.769, 0.829, 0.853, 0.875, 0.839, 0.858, 0.878, 0.859, 0.831])
    },
    {
      'label': 'devdan-s128',
      'acc_avg': '83.9±18.8',
      'acc': np.array([0.099, 0.749, 0.825, 0.83, 0.867, 0.895, 0.9, 0.897, 0.904, 0.9, 0.928, 0.909, 0.093, 0.818, 0.875, 0.882, 0.872, 0.897, 0.918, 0.909, 0.878, 0.917, 0.892, 0.922, 0.908, 0.91, 0.904, 0.923, 0.917, 0.917, 0.928, 0.901, 0.919, 0.923, 0.923, 0.919, 0.926, 0.935, 0.908, 0.923, 0.937, 0.93, 0.939, 0.932, 0.896, 0.929, 0.898, 0.913, 0.946, 0.917, 0.115, 0.735, 0.773, 0.823, 0.835, 0.845, 0.84, 0.894, 0.892, 0.092, 0.744, 0.787, 0.844, 0.857, 0.851, 0.866, 0.844, 0.853, 0.856, 0.855])
    },
    # {
    #   'label': 'devdan (static=256)',
    #   'acc_avg': '',
    #   'acc': np.array()
    # },
  ]

  return data


### === time =================
# --- For triplet 
# test time(s): (7.227, 0.103, 0.105)
# train time(s): (6.484, 0.094, 0.011)

def get_pmnist_data():
  data = [
    {
      'label': 'Meta-CE (cls)',
      'acc_avg': '84.2±19.1',
      'acc': np.array([0.099, 0.766, 0.81, 0.833, 0.841, 0.852, 0.882, 0.881, 0.898, 0.9, 0.904, 0.884, 0.073, 0.695, 0.771, 0.823, 0.836, 0.876, 0.888, 0.9, 0.887, 0.89, 0.908, 0.918, 0.901, 0.9, 0.913, 0.916, 0.931, 0.933, 0.934, 0.926, 0.942, 0.925, 0.93, 0.937, 0.941, 0.938, 0.938, 0.936, 0.935, 0.93, 0.947, 0.931, 0.943, 0.936, 0.956, 0.938, 0.955, 0.942, 0.12, 0.715, 0.824, 0.849, 0.869, 0.887, 0.879, 0.903, 0.894, 0.103, 0.724, 0.77, 0.854, 0.877, 0.868, 0.888, 0.895, 0.908, 0.909, 0.906])
    },
    {
      'label': 'Meta-CE (dist)',
      'acc_avg': '80.2±18.0',
      'acc': np.array([0.084, 0.764, 0.789, 0.822, 0.796, 0.814, 0.832, 0.834, 0.844, 0.854, 0.855, 0.845, 0.115, 0.703, 0.743, 0.784, 0.819, 0.836, 0.844, 0.844, 0.836, 0.86, 0.848, 0.872, 0.857, 0.862, 0.865, 0.891, 0.878, 0.88, 0.896, 0.873, 0.882, 0.885, 0.869, 0.886, 0.899, 0.895, 0.876, 0.908, 0.903, 0.876, 0.902, 0.895, 0.896, 0.886, 0.879, 0.88, 0.909, 0.894, 0.12, 0.649, 0.787, 0.804, 0.84, 0.842, 0.852, 0.875, 0.865, 0.097, 0.665, 0.739, 0.793, 0.843, 0.835, 0.858, 0.837, 0.892, 0.856, 0.864])
    },
    {
      'label': 'MT-triplet (cls)',
      'acc_avg': '85.1±19.2',
      'acc': np.array([0.124, 0.79, 0.815, 0.859, 0.85, 0.897, 0.903, 0.916, 0.919, 0.909, 0.93, 0.927, 0.067, 0.741, 0.835, 0.861, 0.869, 0.902, 0.917, 0.914, 0.899, 0.906, 0.9, 0.922, 0.923, 0.913, 0.934, 0.927, 0.939, 0.934, 0.936, 0.924, 0.946, 0.927, 0.925, 0.944, 0.942, 0.94, 0.927, 0.935, 0.944, 0.931, 0.94, 0.949, 0.95, 0.933, 0.95, 0.934, 0.95, 0.94, 0.123, 0.637, 0.834, 0.832, 0.873, 0.896, 0.89, 0.903, 0.899, 0.098, 0.713, 0.818, 0.857, 0.875, 0.876, 0.895, 0.901, 0.907, 0.909, 0.902])
    },
    {
      'label': 'MT-triplet (dist)',
      'acc_avg': '81.5±18.2',
      'acc': np.array([0.084, 0.794, 0.77, 0.816, 0.801, 0.86, 0.826, 0.856, 0.851, 0.893, 0.892, 0.868, 0.066, 0.742, 0.807, 0.827, 0.834, 0.855, 0.876, 0.879, 0.869, 0.866, 0.872, 0.881, 0.881, 0.873, 0.88, 0.889, 0.898, 0.888, 0.884, 0.885, 0.907, 0.883, 0.871, 0.909, 0.91, 0.896, 0.901, 0.909, 0.89, 0.881, 0.891, 0.893, 0.901, 0.869, 0.897, 0.901, 0.923, 0.876, 0.167, 0.663, 0.805, 0.812, 0.838, 0.866, 0.84, 0.868, 0.855, 0.089, 0.691, 0.806, 0.826, 0.843, 0.863, 0.847, 0.856, 0.879, 0.872, 0.871])
    },
    {
      'label': 'devdan-dyn',  # 89 nodes created
      'acc_avg': '75.1±18.3',
      'acc': np.array([0.091, 0.533, 0.71, 0.534, 0.762, 0.787, 0.751, 0.766, 0.737, 0.826, 0.796, 0.841, 0.105, 0.507, 0.702, 0.749, 0.716, 0.818, 0.817, 0.852, 0.761, 0.847, 0.87, 0.839, 0.842, 0.757, 0.87, 0.833, 0.802, 0.858, 0.861, 0.839, 0.866, 0.848, 0.759, 0.886, 0.789, 0.871, 0.867, 0.844, 0.845, 0.863, 0.879, 0.888, 0.874, 0.87, 0.843, 0.885, 0.889, 0.892, 0.121, 0.581, 0.759, 0.736, 0.802, 0.835, 0.862, 0.817, 0.849, 0.118, 0.439, 0.68, 0.681, 0.732, 0.785, 0.803, 0.776, 0.765, 0.814, 0.795])
    },
  ]

  return data

### === time =================
# --- devdan-dyn
# test time(s): (4.090, 0.058, 0.076)
# train time(s): (97.951, 1.399, 0.202)
# --- For triplet 

def get_rmnist_data():
  data = [
    {
      'label': 'Meta-CE (cls)',
      'acc_avg': '84.8±10.7',
      'acc': np.array([0.114, 0.584, 0.698, 0.764, 0.806, 0.81, 0.827, 0.816, 0.863, 0.843, 0.862, 0.862, 0.693, 0.798, 0.805, 0.822, 0.832, 0.862, 0.871, 0.869, 0.859, 0.852, 0.862, 0.868, 0.879, 0.878, 0.879, 0.889, 0.903, 0.896, 0.887, 0.877, 0.917, 0.9, 0.892, 0.914, 0.913, 0.905, 0.916, 0.911, 0.911, 0.906, 0.919, 0.917, 0.919, 0.901, 0.923, 0.898, 0.925, 0.908, 0.798, 0.856, 0.861, 0.855, 0.864, 0.886, 0.873, 0.902, 0.883, 0.679, 0.823, 0.817, 0.843, 0.849, 0.875, 0.883, 0.887, 0.883, 0.886, 0.863])
    },
    {
      'label': 'Meta-CE (dist)',
      'acc_avg': '80.4±10.2',
      'acc': np.array([0.084, 0.692, 0.684, 0.74, 0.751, 0.77, 0.775, 0.766, 0.794, 0.789, 0.813, 0.797, 0.643, 0.754, 0.752, 0.773, 0.793, 0.826, 0.814, 0.836, 0.811, 0.802, 0.816, 0.818, 0.823, 0.828, 0.834, 0.851, 0.843, 0.864, 0.856, 0.836, 0.87, 0.847, 0.852, 0.861, 0.853, 0.855, 0.859, 0.854, 0.866, 0.861, 0.884, 0.873, 0.894, 0.867, 0.871, 0.866, 0.9, 0.865, 0.742, 0.806, 0.834, 0.799, 0.831, 0.82, 0.826, 0.848, 0.841, 0.626, 0.746, 0.781, 0.801, 0.814, 0.813, 0.825, 0.824, 0.827, 0.826, 0.831])
    },
    {
      'label': 'MT-triplet (cls)',
      'acc_avg': '87.7±10.8',
      'acc': np.array([0.114, 0.644, 0.726, 0.795, 0.853, 0.855, 0.862, 0.866, 0.895, 0.881, 0.893, 0.902, 0.737, 0.845, 0.864, 0.861, 0.871, 0.886, 0.916, 0.921, 0.905, 0.909, 0.914, 0.916, 0.901, 0.898, 0.914, 0.925, 0.929, 0.935, 0.931, 0.91, 0.92, 0.92, 0.921, 0.935, 0.924, 0.928, 0.931, 0.94, 0.934, 0.935, 0.937, 0.938, 0.94, 0.93, 0.938, 0.924, 0.954, 0.938, 0.829, 0.865, 0.89, 0.885, 0.901, 0.904, 0.901, 0.917, 0.897, 0.712, 0.805, 0.845, 0.861, 0.869, 0.885, 0.904, 0.903, 0.899, 0.894, 0.896])
    },
    {
      'label': 'MT-triplet (dist)',
      'acc_avg': '82.5±10.5',
      'acc': np.array([0.084, 0.734, 0.714, 0.791, 0.788, 0.837, 0.838, 0.814, 0.846, 0.84, 0.859, 0.864, 0.687, 0.824, 0.85, 0.813, 0.855, 0.853, 0.853, 0.881, 0.848, 0.83, 0.853, 0.856, 0.862, 0.854, 0.847, 0.867, 0.871, 0.871, 0.869, 0.851, 0.884, 0.868, 0.865, 0.878, 0.867, 0.86, 0.866, 0.888, 0.887, 0.866, 0.878, 0.885, 0.898, 0.873, 0.857, 0.849, 0.9, 0.854, 0.73, 0.829, 0.848, 0.809, 0.861, 0.839, 0.855, 0.85, 0.856, 0.537, 0.73, 0.781, 0.793, 0.81, 0.824, 0.811, 0.835, 0.858, 0.809, 0.83])
    },
    {
      'label': 'devdan-dyn',
      'acc_avg': '81.4±10.9',
      'acc': np.array([0.091, 0.502, 0.717, 0.742, 0.818, 0.819, 0.695, 0.778, 0.79, 0.827, 0.757, 0.837, 0.665, 0.726, 0.731, 0.77, 0.799, 0.812, 0.842, 0.803, 0.859, 0.842, 0.853, 0.833, 0.834, 0.878, 0.869, 0.876, 0.851, 0.845, 0.882, 0.827, 0.885, 0.836, 0.865, 0.892, 0.892, 0.869, 0.899, 0.89, 0.836, 0.827, 0.812, 0.877, 0.933, 0.88, 0.893, 0.839, 0.875, 0.883, 0.708, 0.809, 0.843, 0.793, 0.839, 0.866, 0.833, 0.862, 0.886, 0.735, 0.77, 0.818, 0.847, 0.862, 0.817, 0.882, 0.823, 0.889, 0.839, 0.818])
    },
  ]
  return data

def get_rfmnist_data():
  data = [
    {
      'label': 'Meta-CE (cls)',
      'acc_avg': '72.8±11.0',
      'acc': np.array([0.137, 0.639, 0.678, 0.713, 0.678, 0.738, 0.692, 0.737, 0.713, 0.692, 0.722, 0.749, 0.34, 0.681, 0.711, 0.737, 0.701, 0.718, 0.728, 0.74, 0.752, 0.73, 0.766, 0.747, 0.776, 0.765, 0.778, 0.76, 0.788, 0.813, 0.775, 0.797, 0.776, 0.803, 0.797, 0.79, 0.786, 0.814, 0.794, 0.808, 0.793, 0.808, 0.822, 0.797, 0.796, 0.808, 0.797, 0.81, 0.818, 0.785, 0.464, 0.7, 0.706, 0.751, 0.729, 0.733, 0.752, 0.739, 0.763, 0.372, 0.692, 0.71, 0.732, 0.731, 0.681, 0.761, 0.762, 0.755, 0.748, 0.758])
    },
    {
      'label': 'Meta-CE (dist)',
      'acc_avg': '69.1±10.5',
      'acc': np.array([0.101, 0.683, 0.687, 0.716, 0.678, 0.697, 0.676, 0.714, 0.704, 0.691, 0.713, 0.714, 0.409, 0.665, 0.704, 0.703, 0.679, 0.699, 0.703, 0.707, 0.714, 0.702, 0.748, 0.711, 0.737, 0.734, 0.738, 0.703, 0.736, 0.755, 0.74, 0.773, 0.748, 0.739, 0.751, 0.742, 0.713, 0.752, 0.751, 0.742, 0.744, 0.752, 0.741, 0.746, 0.747, 0.726, 0.776, 0.763, 0.774, 0.725, 0.375, 0.639, 0.677, 0.689, 0.689, 0.695, 0.706, 0.691, 0.694, 0.311, 0.641, 0.679, 0.672, 0.689, 0.672, 0.716, 0.723, 0.708, 0.701, 0.706])
    },
    {
      'label': 'MT-triplet (cls)',
      'acc_avg': '68.9±10.7',
      'acc': np.array([0.137, 0.656, 0.637, 0.734, 0.721, 0.675, 0.706, 0.74, 0.739, 0.667, 0.743, 0.772, 0.449, 0.666, 0.664, 0.683, 0.673, 0.713, 0.715, 0.736, 0.743, 0.734, 0.732, 0.704, 0.714, 0.754, 0.731, 0.724, 0.784, 0.727, 0.752, 0.786, 0.772, 0.752, 0.737, 0.799, 0.748, 0.73, 0.787, 0.768, 0.754, 0.774, 0.773, 0.765, 0.757, 0.761, 0.763, 0.779, 0.788, 0.752, 0.437, 0.628, 0.638, 0.68, 0.657, 0.689, 0.684, 0.68, 0.686, 0.347, 0.558, 0.532, 0.561, 0.618, 0.627, 0.642, 0.667, 0.651, 0.662, 0.698])
    },
    {
      'label': 'MT-triplet (dist)',
      'acc_avg': '66.3±11.1',
      'acc': np.array([0.101, 0.67, 0.703, 0.72, 0.704, 0.708, 0.699, 0.743, 0.732, 0.735, 0.71, 0.728, 0.417, 0.653, 0.683, 0.684, 0.68, 0.718, 0.702, 0.72, 0.716, 0.698, 0.695, 0.681, 0.726, 0.733, 0.724, 0.693, 0.73, 0.721, 0.722, 0.746, 0.722, 0.706, 0.714, 0.71, 0.696, 0.716, 0.712, 0.713, 0.722, 0.729, 0.728, 0.701, 0.719, 0.693, 0.731, 0.752, 0.734, 0.718, 0.301, 0.562, 0.598, 0.632, 0.606, 0.635, 0.644, 0.617, 0.669, 0.251, 0.551, 0.574, 0.585, 0.627, 0.622, 0.644, 0.649, 0.622, 0.681, 0.648])
    },
    {
      'label': 'devdan-dyn',
      'acc_avg': '59.5±10.3',
      'acc': np.array([0.084, 0.438, 0.618, 0.575, 0.664, 0.604, 0.581, 0.667, 0.636, 0.584, 0.636, 0.712, 0.407, 0.53, 0.544, 0.607, 0.401, 0.521, 0.595, 0.597, 0.698, 0.708, 0.657, 0.702, 0.729, 0.626, 0.671, 0.626, 0.571, 0.681, 0.619, 0.622, 0.651, 0.689, 0.671, 0.585, 0.734, 0.625, 0.675, 0.476, 0.657, 0.593, 0.669, 0.608, 0.622, 0.651, 0.637, 0.647, 0.633, 0.639, 0.404, 0.635, 0.527, 0.671, 0.626, 0.552, 0.676, 0.593, 0.574, 0.338, 0.363, 0.511, 0.613, 0.622, 0.646, 0.547, 0.603, 0.622, 0.584, 0.559])
    },
  ]
  return data


def main():
  n_chunk = 70
  colors = ['limegreen', 'hotpink', 'blueviolet', 'royalblue', 'darkorange', 'gold', 'brown']
  # data = get_pmnist_devdan_data()
  data = get_pmnist_data()
  # data = get_rmnist_data()
  # data = get_rfmnist_data()

  for idx, item in enumerate(data):
    label = item['label']
    acc_avg = item['acc_avg']
    acc = item['acc']
    plt.plot(
      np.arange(n_chunk), acc,
      linewidth=1.2,
      label='{}: {}'.format(label, acc_avg),
      c=colors[idx]
    )

  plt.title('Permuted-MNIST')
  plt.ylim([0, 1])
  plt.xlim([0, n_chunk])
  plt.ylabel('Accuracy', fontsize=10)
  plt.xlabel('Chunk')
  plt.yticks(np.arange(0, 1.01, step=0.2))
  plt.xticks(np.arange(0, n_chunk+1, step=10))
  plt.legend(loc='lower left', ncol=3)

  plt.show()

if __name__ == '__main__':
  main()






















#### == Devdan dataset ======================
  # data = [
  #   {
  #     'label': 'devdan (dyn)',  # 90 nodes created
  #     'acc_avg': '76.4±16.5',
  #     'acc': np.array([0.097, 0.656, 0.649, 0.736, 0.742, 0.748, 0.778, 0.708, 0.837, 0.857, 0.823, 0.821, 0.875, 0.866, 0.862, 0.845, 0.845, 0.839, 0.801, 0.854, 0.818, 0.844, 0.802, 0.811, 0.837, 0.104, 0.598, 0.784, 0.784, 0.806, 0.745, 0.838, 0.793, 0.829, 0.862, 0.796, 0.814, 0.801, 0.758, 0.831, 0.732, 0.893, 0.847, 0.873, 0.856, 0.087, 0.491, 0.644, 0.702, 0.712, 0.763, 0.806, 0.845, 0.818, 0.73, 0.842, 0.821, 0.837, 0.791, 0.824, 0.415, 0.891, 0.804, 0.743, 0.861, 0.835, 0.856, 0.892, 0.874, 0.892])
  #   },
  #   {
  #     'label': 'devdan (static=16)',
  #     'acc_avg': '69.4±22.6',
  #     'acc': np.array([0.094, 0.768, 0.815, 0.814, 0.826, 0.845, 0.852, 0.859, 0.85, 0.865, 0.862, 0.875, 0.854, 0.838, 0.834, 0.862, 0.866, 0.834, 0.863, 0.884, 0.889, 0.898, 0.882, 0.855, 0.874, 0.105, 0.136, 0.264, 0.322, 0.516, 0.606, 0.64, 0.61, 0.658, 0.67, 0.581, 0.677, 0.678, 0.691, 0.718, 0.754, 0.779, 0.813, 0.823, 0.776, 0.091, 0.193, 0.256, 0.279, 0.336, 0.459, 0.544, 0.633, 0.663, 0.649, 0.741, 0.714, 0.673, 0.749, 0.76, 0.601, 0.846, 0.876, 0.863, 0.85, 0.879, 0.856, 0.889, 0.887, 0.897])
  #   },
  #   {
  #     'label': 'devdan (static=32)',
  #     'acc_avg': '79.2±17.7',
  #     'acc': np.array([0.098, 0.835, 0.823, 0.827, 0.881, 0.863, 0.867, 0.86, 0.868, 0.873, 0.886, 0.8, 0.865, 0.896, 0.875, 0.861, 0.906, 0.897, 0.88, 0.903, 0.885, 0.895, 0.896, 0.893, 0.879, 0.106, 0.609, 0.7, 0.764, 0.803, 0.832, 0.777, 0.824, 0.836, 0.843, 0.845, 0.862, 0.865, 0.821, 0.855, 0.875, 0.863, 0.85, 0.828, 0.835, 0.092, 0.369, 0.532, 0.651, 0.67, 0.726, 0.774, 0.792, 0.797, 0.78, 0.82, 0.801, 0.842, 0.865, 0.854, 0.477, 0.835, 0.904, 0.899, 0.887, 0.89, 0.885, 0.892, 0.912, 0.907])
  #   },
  #   {
  #     'label': 'devdan (static=64)',
  #     'acc_avg': '82.8±16.7',
  #     'acc': np.array([0.098, 0.741, 0.779, 0.835, 0.864, 0.865, 0.886, 0.879, 0.886, 0.889, 0.891, 0.898, 0.903, 0.884, 0.895, 0.868, 0.898, 0.907, 0.879, 0.898, 0.901, 0.918, 0.911, 0.918, 0.904, 0.1, 0.664, 0.801, 0.844, 0.798, 0.836, 0.846, 0.848, 0.882, 0.915, 0.891, 0.887, 0.874, 0.86, 0.898, 0.847, 0.864, 0.871, 0.902, 0.888, 0.091, 0.743, 0.71, 0.757, 0.812, 0.806, 0.803, 0.874, 0.84, 0.864, 0.871, 0.856, 0.889, 0.875, 0.879, 0.548, 0.896, 0.913, 0.911, 0.91, 0.903, 0.908, 0.918, 0.931, 0.916])
  #   },
  #   {
  #     'label': 'devdan (static=128)',
  #     'acc_avg': '84.6±16.5',
  #     'acc': np.array([0.098, 0.756, 0.844, 0.83, 0.873, 0.847, 0.87, 0.876, 0.86, 0.888, 0.912, 0.915, 0.89, 0.904, 0.917, 0.905, 0.901, 0.884, 0.911, 0.92, 0.911, 0.925, 0.929, 0.917, 0.91, 0.103, 0.71, 0.788, 0.867, 0.856, 0.863, 0.867, 0.862, 0.89, 0.891, 0.866, 0.887, 0.888, 0.919, 0.897, 0.92, 0.912, 0.917, 0.916, 0.907, 0.108, 0.739, 0.76, 0.841, 0.853, 0.862, 0.796, 0.895, 0.871, 0.871, 0.892, 0.895, 0.887, 0.897, 0.868, 0.736, 0.934, 0.916, 0.896, 0.922, 0.916, 0.937, 0.933, 0.911, 0.945])
  #   },
  #   {
  #     'label': 'devdan (static=256)',
  #     'acc_avg': '85.9±16.7',
  #     'acc': np.array([0.074, 0.718, 0.809, 0.861, 0.879, 0.892, 0.884, 0.902, 0.878, 0.874, 0.903, 0.912, 0.896, 0.925, 0.899, 0.9, 0.891, 0.92, 0.912, 0.939, 0.931, 0.917, 0.931, 0.921, 0.928, 0.105, 0.841, 0.836, 0.874, 0.889, 0.873, 0.877, 0.883, 0.88, 0.917, 0.912, 0.917, 0.903, 0.887, 0.91, 0.915, 0.944, 0.908, 0.903, 0.921, 0.108, 0.778, 0.863, 0.774, 0.875, 0.854, 0.884, 0.917, 0.883, 0.895, 0.858, 0.906, 0.919, 0.916, 0.905, 0.823, 0.934, 0.953, 0.944, 0.926, 0.922, 0.912, 0.936, 0.927, 0.921])
  #   }
  # ]
### == time =========================== 
# --- For devdan (dyn)
# test time(s): (3.858, 0.055, 0.003)
# train time(s): (92.696, 1.324, 0.226)

# --- For devdan (static=16)
# test time(s): (3.534, 0.050, 0.005)
# train time(s): (23.846, 0.341, 0.025)

# --- For devdan (static=32)
# test time(s): (3.523, 0.050, 0.003)
# train time(s): (34.281, 0.490, 0.044)

# --- For devdan (static=64)
# test time(s): (3.840, 0.055, 0.005)
# train time(s): (58.058, 0.829, 0.086)

# --- For devdan (static=128)
# test time(s): (4.344, 0.062, 0.005)
# train time(s): (109.986, 1.571, 0.214)

# --- For devdan (static=256)
# test time(s): (5.801, 0.083, 0.008)
# train time(s): (623.959, 8.914, 0.466)